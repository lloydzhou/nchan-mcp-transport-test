# MCP server configuration
server {
    error_log /dev/stderr debug;
    listen 80 default_server;

    # MCP channel location, the path is the MCP server name
    location ~ ^/mcp/(.+)/(.+)$ {
        set $mcp_server_name $1;
        nchan_channel_id $2;
        nchan_subscriber;
        nchan_subscribe_request /internal/mcp-process;
        nchan_publisher;
        nchan_publisher_upstream_request /internal/mcp-process;
    }
    
    # Internal endpoint for processing MCP requests
    location /internal/mcp-process {
        internal;  # Only accessible within nginx

        set $method 'endpoint';
        # Extract method from JSON request body
        if ($request_body ~* '"method"\s*:\s*"([^"]+)"') {
            set $method $1;
        }
        proxy_pass http://127.0.0.1:8000/mcp/$mcp_server_name/$nchan_channel_id/$method;
        proxy_pass_request_body on;
    }
}


# mock upstream serve
server {
    error_log /dev/stderr debug;
    listen 8000 default_server;
    location ~ ^/mcp/(.+)/(.+)/(.+)$ {
        set $mcp_server_name $1;
        set $session_id $2;
        set $method $3;
        content_by_lua_block{
          local cjson = require("cjson")
          if method == "endpoint" then
            ngx.say("" .. ngx.var.method);
            local url = "/endpoint/" .. ngx.var.mcp_server_name .. "/" .. ngx.var.session_id
            ngx.location.capture(url, {
              method=ngx.HTTP_POST,
              body=url,
            })
            return ngx.OK;
          end
          if method == "initialize" then
            local res = {
              jsonrpc = "2.0",
              id = 0,
              result = {
                protocolVersion = "2024-11-05",
                capabilities = {
                  serverInfo = {
                    name = "test",
                    version = "1.3.0"
                  },
                  instructions = "This MCP server"
                }
              }
            }
            ngx.say(cjson.encode(res))
            return ngx.OK;
          end
          if method == "tools/list" then
            ngx.req.read_body()
            local data = ngx.req.get_body_data() 
            local req = cjson.decode(data)
            local res = {
              jsonrpc = "2.0",
              id = req["id"],
              result = {
                tools = {
                  {
                    name = "test_tool",
                    description = "test",
                    inputSchema = {
                      type = "object",
                      properties = {
                        name = {
                          type = "string"
                        }
                      }
                    }
                  }
                }
              }
            }
            ngx.say(cjson.encode(res))
            return ngx.OK;
          end
        }
    }
    location ~ ^/endpoint/(.+)/(.+)$ {
      proxy_pass http://127.0.0.1:80/mcp/$1/$2;
      proxy_set_header X-EventSource-Event endpoint;
      proxy_pass_request_body on;
    }
}

